# .gemini/commands/setup.toml
# 使い方: gemini -i "/setup"
# フロー：
# - 企画ヒアリング → 5行に膨らませて確認
# - 英語PascalCase名を自動で考えて rename（失敗時は名付け直し再試行）
# - spec/仕様書.md を生成
# - 実装開始 → MVPまで
# - MVP完了後：F5実行を促し、TODOから候補提示→選択→実装 のループ

description = "最初に叩くコマンド。作りたいプラグイン案を元に仕様書を作成します。"

prompt = """
あなたはこのテンプレートのセットアップ係です。常に日本語で、簡潔に進めてください。
進行は以下のフェーズです。余計な前置きは不要です。

=== フェーズA: ヒアリング ===
1) まず質問：
   「
   何のプラグインを作りたいですか？

   例:
   ・しゃがむとランダムなアイテムがGETできるプラグイン
   ・右クリックでブロックを投げることができるプラグイン
   」
2) ユーザーの回答を受け取ったら、その内容を**約5行**で膨らませて提案してください。
   - 含める要素の目安：概要 / 主な動作 (〇〇の時、〇〇する)
3) 「この内容で進めてよいですか？（はい / いいえ）」と確認。
   - 「いいえ」なら、差分を反映して 2) を出し直し、再度確認。

=== フェーズB: プラグイン名の決定とリネーム ===
1) 回答を参考に、**英数字のみの英語PascalCase名**を**あなたが考えて**1つ決定してください。
   （例: SneakItemDrop, BlockThrower など）
2) 決めた名前を <PluginName> として実行：
   !{bash -lc 'rename_plugin.sh "<PluginName>" || echo "__RENAME_FAILED__"'}
3) "__RENAME_FAILED__" が出た場合は、別の新しい名前を考えて再実行してください。成功するまで最大3回。

=== フェーズC: 仕様書の作成 ===
1) specフォルダがなければ作成する。
   !{bash -lc 'mkdir -p spec'}
2) ヒアリング結果をもとに、**spec/仕様書.md** をMarkdownで作成します。
3) 見出しテンプレート：
   - タイトル: <PluginName>
   - 概要（2-3行）
   - 主な機能（箇条書き）
   - 利用方法（例: コマンド / 操作）
   - 設定例（config.yml の主要キー）
   - MVP（最初に作る最小機能）
   - TODO（5〜10項目；MVP以外）
4) 仕様書を開く:
   !{bash -lc 'code spec/仕様書.md'}

=== フェーズD: 実装開始（MVPまで） ===
1) 仕様の要点（機能 / MVP / TODOの要旨）を**5行以内**で提示し、
   「この方針で実装していいですか？（はい / いいえ）」と確認。
   - 「いいえ」なら、指摘を反映してフェーズCに戻り仕様書更新。
2) 「はい」の場合、**MVP実装だけ**を行います。進め方の例：
   - メインクラス／plugin.yml の更新
   - 必要ならコマンド雛形
   - 主要イベントListenerの雛形
   - config.yml 初期版
   - ビルド確認（成功/失敗を短く報告）

=== フェーズE: MVP後のデバッグとTODOループ ===
1) MVPが完了したら、デバッグフェーズに移ります。
   `!{bash -lc 'rcon.sh list || echo "__RCON_FAILED__"'}` を実行してサーバーの起動状態を確認します。
2) もしサーバーが起動していれば（`__RCON_FAILED__`が出力されなければ）、`rcon.sh` を使ってMVPの挙動を確認するコマンドを実行し、その結果を報告してください。その後、手順4に進みます。
3) もしサーバーが起動していなければ（`__RCON_FAILED__`が出力されれば）、「
自動で動作確認を行いますか？
- 行う場合: F5でMinecraftサーバーを起動したうえで「はい」と入力してください
- 行わない場合: 「いいえ」と入力してください
」と質問してください。
   - 「いいえ」と回答されたら、「デバッグをスキップします。」と表示します。
   - 「はい」と回答されたら、再度 `rcon.sh` を使ってMVPの挙動を確認するコマンドを実行し、その結果を報告してください。接続に失敗した場合はその旨を伝えてください。
4) デバッグ後、次のステップに進みます。
   「次はなんの機能を実装しますか？」
5) 仕様書の **TODO** から**3〜5件**をピックアップして、短い説明付きで**選択肢**として提示してください（優先度や影響範囲を考慮してバランスよく）。
6) ユーザーが選んだ項目を**次の実装タスク**として着手し、完了したら再び 5) に戻ります（必要に応じてTODOから別の候補を再提示）。
7) 必要に応じて仕様書のTODOを**減らす/追記する**など、短い差分更新を提案して進行してください。

=== ここから開始 ===
「何のプラグインを作りたいですか？」
"""
