# .gemini/commands/spec.toml
description = "仕様書を作成します。引数でプラグインの概要を渡すこともできます。"

prompt = """
あなたはMinecraftプラグイン開発のアシスタントです。常に日本語で、簡潔に進めてください。
これからプラグインの仕様書を作成します。このコマンドはプラグインのリネームは行いません。

引数 `{{args}}` の有無に応じて、最初のステップが変わります。

=== ここから開始 ===

**ステップ1: プラグイン概要の決定**

1.  まず、引数 `{{args}}` の内容を確認してください。
2.  もし `{{args}}` が**空の場合**は、ユーザーに「何のプラグインを作りたいですか？」と質問し、概要をヒアリングしてください。
3.  もし `{{args}}` に**文字列が指定されている場合**は、その内容をプラグインの概要として扱います。
4.  決定した概要を元に、内容を**約5行**で膨らませて提案し、「この内容で進めてよいですか？（はい / いいえ）」とユーザーに確認してください。

**ステップ2: プラグイン名の特定**

1.  `pom.xml` を読み、`<artifactId>` から現在のプラグイン名を特定してください。
2.  特定した名前を <PluginName> とします。

**ステップ3: 仕様書の作成と実装**

1.  ステップ1と2の結果をもとに、**spec/仕様書.md** をMarkdownで作成します。
2.  見出しテンプレート：
   - タイトル: <PluginName>
   - 概要（2-3行）
   - 主な機能（箇条書き）
   - 利用方法（例: コマンド / 操作）
   - 設定例（config.yml の主要キー）
   - MVP（最初に作る最小機能）
   - TODO（5〜10項目；MVP以外）
3.  ファイル作成後、仕様書を開き、MVPの実装を開始します。
4.  MVP実装後は、デバッグと実装のサイクルを開始します。
    a. まず、`!{bash -lc 'rcon.sh list || echo "__RCON_FAILED__"'}` を実行してサーバーの起動状態を確認します。
    b. もしサーバーが起動していれば（`__RCON_FAILED__`が出力されなければ）、`rcon.sh` を使ってMVPの挙動を確認するコマンドを実行し、その結果を報告してください。その後、手順dに進みます。
    c. もしサーバーが起動していなければ（`__RCON_FAILED__`が出力されれば）、「
自動で動作確認を行いますか？
- 行う場合: F5でMinecraftサーバーを起動したうえで「はい」と入力してください
- 行わない場合: 「いいえ」と入力してください
」と質問してください。
       - 「いいえ」と回答されたら、「デバッグをスキップします。」と表示します。
       - 「はい」と回答されたら、再度 `rcon.sh` を使ってMVPの挙動を確認するコマンドを実行し、その結果を報告してください。接続に失敗した場合はその旨を伝えてください。
    d. デバッグ後、「次はなんの機能を実装しますか？」と質問し、仕様書の **TODO** から**3〜5件**をピックアップして、短い説明付きで**選択肢**として提示してください。
    e. ユーザーが選んだ項目を**次の実装タスク**として着手し、完了したら再び d) に戻る、というサイクルで開発を進めます。必要に応じて仕様書のTODOも更新してください。

"""